# Kevin O'Connor
# Facebook Check-in Kaggle Competition

# This scipt attempts to predict a ranked list of the three most likely check-in locations based on a single check-in event.  This method simply gives the three closest locations by distance where the location of each place is determined by averaging locations in the training data.  

import pandas as pd, os, math, numpy as np

# Setting working directory
os.chdir('/Users/kevinoconnor/Documents/Kaggle Competitions/FacebookCheckInCompetition/')

# Loading training and test data
train_data = pd.read_csv('train.csv', header=0)
test_data = pd.read_csv('test.csv', header=0)

# Computing mean (x,y) coordinates from training data
places = sorted(set(train_data['place_id']))
x_places = train_data['x'].groupby(train_data['place_id'])
y_places = train_data['y'].groupby(train_data['place_id'])
x_means = x_places.mean()
y_means = y_places.mean()

# Making predictions from training data
def make_prediction(x_loc, y_loc, x_mean, y_mean):
	sq_dist = np.add(np.power(np.subtract(np.array([x_loc]*len(x_mean)), np.array(x_mean.tolist())), 2), np.power(np.subtract(np.array([y_loc]*len(y_mean)), np.array(y_mean.tolist())), 2))
	nearest_indices = sq_dist.argsort()[:3]
	nearest_neighbor = []
	nearest_neighbor.append(places[nearest_indices[0]])
	nearest_neighbor.append(places[nearest_indices[1]])
	nearest_neighbor.append(places[nearest_indices[2]])
	nearest_neighbor = ' '.join(str(e) for e in nearest_neighbor)
	return(nearest_neighbor)

nearest_neighbors = []
for index, row in test_data.iterrows():
	nearest_neighbors.append(make_prediction(row['x'], row['y'], x_means, y_means))

predictions = pd.DataFrame(data=nearest_neighbors, columns=['place_id'])
predictions.index.names = ['row_id']
predictions.to_csv('test_predictions1.csv')