# Kevin O'Connor
# Facebook Check-in Kaggle Competition

# This scipt attempts to predict a ranked list of the three most likely check-in locations based on a single check-in event.  This method simply gives the three closest locations by distance where the location of each place is determined by averaging locations in the training data.  

import pandas as pd, os, math, numpy as np
from sklearn.neighbors import NearestNeighbors

# Setting working directory
os.chdir('/Users/kevinoconnor/Documents/Kaggle Competitions/FacebookCheckInCompetition/')

# Loading training and test data
## Number of rows which are used from each data set are restricted to make computation time reasonable
train_data = pd.read_csv('train.csv', header=0, nrows=10000)
test_data = pd.read_csv('test.csv', header=0, nrows=1000)


# Computing mean (x,y) coordinates from training data
places = np.array(sorted(set(train_data['place_id'])))
x_places = train_data['x'].groupby(train_data['place_id'])
y_places = train_data['y'].groupby(train_data['place_id'])
x_means = x_places.mean()
y_means = y_places.mean()

# Reading in place locations
places_x = pd.read_csv('places_x.csv', header=0)
places_y = pd.read_csv('places_y.csv', header=0)

# Using nearest neighbor method
neigh = NearestNeighbors(n_neighbors=3, n_jobs=-1, metric='l2')
neigh.fit(np.matrix([x_means, y_means]).T.tolist())

# Making predictions from training data
nearest_neighbors_arr = []
for index, row in test_data.iterrows():
	nearest_neighbors_arr.append(' '.join(str(places[np.array(e)]) for e in neigh.kneighbors([row['x'], row['y']], n_neighbors=3, return_distance=False))[1:-1])

# Formatting and saving predictions
predictions = pd.DataFrame(data=nearest_neighbors_arr, columns=['place_id'])
predictions.index.names = ['row_id']
predictions.to_csv('test_predictions1.csv')
